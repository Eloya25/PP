1. INTRODUCCIÓN

	Estudio comparativo y conclusiones alcanzadas de la ejecución de diversos algoritmos de ordenación en lenguaje Ocaml.

2. HARDWARE
	
	Las pruebas se han ejecutado en una maquina virtual con las siguientes características:
		- CPU: Intel Core i7-4790K 4.00 GHz
		- Memoria RAM: Kingston HyperX Fury Black DDR3 1866MHz de 16GB, con 2 módulos de 8GB CL10
		- Sistema Operativo: Ubuntu 14.04 LTS 64 bits
		- Disco Duro: WD Blue 1TB SATA3 a 7200rpm con Buffer 64 MB Cache

3. RESULTADOS

	La tabla de resultados presentada a continuación viene dada en segundos. Para las mediciones se han utilizado listas de números enteros, ordenadas y no ordenadas, de tamaño 2, 4, 8, 16, 32, 64, 128, 256 y 512 mil elementos. Cabe mencionar que las listas no ordenadas se han generado mediante la función fromto implementada en la práctica 5, y que se ha generado una única lista ordenada y una única lista no ordenada de cada uno de los tamaños, con el fin de que al realizar las pruebas los resultados obtenidos sean bajo las mismas hipótesis.

		#			ISORT
		#
		# 		isort ordenado
		# - : float = 0.000101000000000017742
		# - : float = 0.00136999999999998234
		# - : float = 0.0003809999999999647
		# - : float = 0.000761000000000011667
		# - : float = 0.00247400000000003173
		# - : float = 0.00479199999999996296
		# - : float = 0.0137760000000000105
		# - : float = 0.0301869999999999639
		# Stack overflow during evaluation (looping recursion?).
		#
		#   	isort desordenado
		# - : float = 0.0325810000000000266
		# - : float = 0.12927699999999992
		# - : float = 0.532209
		# - : float = 2.36380000000000035
		# - : float = 10.976643000000001
		# - : float = 54.5662080000000103
		#	(*)
		#
		#	isort_t ordenado
		# - : float = 0.112351000000003864
		# - : float = 0.452640999999999849
		# - : float = 1.97513999999999612
		# - : float = 8.64471099999998671
		# - : float = 40.993218
		#	(*)
		#
		#	isort_t desordenado
		# - : float = 0.0563860000000033779
		# - : float = 0.228813999999999851
		# - : float = 1.01998700000000042
		# - : float = 4.06920099999999252
		# - : float = 18.4757129999999705
		# - : float = 88.714777
		#	(*)
	
	La primera conclusión obvia que se puede extraer es que el algoritmo tarda un tiempo notablemente inferior en ordenar una lista ya ordenada que una lista desordenada.
	Analizando los resultados se puede ver que tanto para listas ordenadas como para listas desordenadas con un crecimiento de tamaño exponencial de razón 2, el tiempo de ordenación aumenta aproximadamente a razón x4.5 con respecto al tiempo empleado para la ordenación de la lista de tamaño inmediatamente anterior (**).
	Se puede concluir que este es un algoritmo con complejidad computacional cuadrática O(n^2).
	Además, se puede añadir que el algoritmo no puedo operar con, al menos, listas de tamaño mayor 512.000 elementos, aunque sí cabe mencionar que la función que no es recursiva terminal tiene una mayor eficiencia (menor tiempo de ordenación) que la recursiva terminal.


		# 			MSORT
		#
		# 		msort ordenado
		# - : float = 0.00134299999999143438
		# - : float = 0.00272900000001641274
		# - : float = 0.00682399999999461215
		# - : float = 0.0159270000000049095
		# - : float = 0.0341980000000035
		# - : float = 0.0781189999999867268
		# - : float = 0.171526000000000067
		# Stack overflow during evaluation (looping recursion?).
		# Stack overflow during evaluation (looping recursion?).
		#
		#     	msort desordenado
		# - : float = 0.00125900000000456203
		# - : float = 0.0033620000000098571
		# - : float = 0.00830500000000711225
		# - : float = 0.0165519999999901302
		# - : float = 0.038067999999981339
		# - : float = 0.0804380000000151085
		# - : float = 0.179811999999998307
		# Stack overflow during evaluation (looping recursion?).
		# Stack overflow during evaluation (looping recursion?).
		#
		# 	msort_qt ordenado
		# - : float = 0.00271299999999996544
		# - : float = 0.00586799999999243482
		# - : float = 0.0138280000000179371
		# - : float = 0.0306029999999850588
		# - : float = 0.0623980000000017299
		# - : float = 0.139367000000021335
		# - : float = 0.308824999999984584
		# - : float = 0.668608000000006086
		# - : float = 1.45695799999998599
		#
		#   	msort_qt desordenado
		# - : float = 0.00272499999999809
		# - : float = 0.0059249999999906322
		# - : float = 0.013862999999986414
		# - : float = 0.0308080000000074961
		# - : float = 0.0649879999999996
		# - : float = 0.212222999999994499
		# - : float = 0.312678000000005341
		# - : float = 0.684969999999992751
		# - : float = 1.56969800000001669



	A diferencia del anterior algoritmo, el tiempo que precisa este para ordenar una lista desordenada y una lista ya ordenada es muy parejo.
	Analizando los resultados se puede ver que tanto para listas ordenadas como para listas desordenadas con el mismo crecimiento exponencial de tamaño, el tiempo de ordenación aumenta en poco más que un factor x2 con respecto al tiempo empleado para la ordenación de la lista de tamaño inmediatamente anterior (**).
	Este algoritmo aplica la técnica de Divide y Vencerás, y del que se puede concluir que tiene una complejidad computacional O(n*log(n)), la cual es notablemente menor que la del algoritmo de ordenación por inserción, lo que se traduce en un menor tiempo de computación y un menor incremento de tiempo al aumentar el tamaño de la lista.
	Además, se puede añadir que el algoritmo no puedo operar con, al menos, listas de tamaño mayor 256.000 elementos, aunque sí cabe mencionar que la función que no es recursiva terminal tiene una mayor eficiencia (menor tiempo de ordenación) que la recursiva quasiterminal.


		# 		QSORT
		#
		# 	qsort ordenado
		# - : float = 0.273745000000019445
		# - : float = 0.746551000000010845
		# - : float = 3.32189300000001708
		# - : float = 13.8476619999999855
		#	(*)
		#
		# 	qsort desordenado
		# - : float = 0.00231899999999996
		# - : float = 0.00464699999997719715
		# - : float = 0.0130740000000741929
		# - : float = 0.0263340000000198415
		# - : float = 0.0587259999999787397
		# - : float = 0.130375999999955638
		# - : float = 0.293838999999991302
		# - : float = 0.687167999999985568
		# Stack overflow during evaluation (looping recursion?).
		#
		#       qsort_qt ordenado
		# - : float = 0.204196999999965101
		# - : float = 0.808357999999998356
		# - : float = 3.27431299999994962
		# - : float = 14.1347279999999955
		#	(*)
		#
		#	qsort_qt desordenado
		# - : float = 0.00253900000001294757
		# - : float = 0.00533200000000988439
		# - : float = 0.0147210000000086438
		# - : float = 0.0290469999999913853
		# - : float = 0.0638059999999995853
		# - : float = 0.141272999999955573
		# - : float = 0.311306000000001859
		# - : float = 0.74390899999997373
		# - : float = 1.57324900000003254

	
	En este último caso a estudiar, el algoritmo de ordenación rápida o quicksort, el primer resultado a simple vista que se puede apreciar es que la diferencia de tiempos entre la función no terminal y la quasiterminal es prácticamente nula, con la ventaja añadida de que esta última puede operar con listas de, al menos, tamaños mayores de 512.000 elementos.
	Otra conclusión que arroja este estudio es que el factor de crecimiento de tiempo entre entradas consecutivas de la tabla es de un factor un poco mayor de x2.
	También es resaltable que este algoritmo es más eficiente con listas desordenadas que con listas ordenadas.
	La complejidad del quicksort, por lo tanto, es de O(n*log(n)) tanto en su mejor caso como en su caso medio (ya que este se aproxima al mejor caso). Mientras que en el peor caso llega a ser de complejidad cuadrática O(n^2).

	
	(*) A partir de ciertos tamaños de listas el algoritmo, al no ser de complejidad lineal, tarda demasiado tiempo en completarse, algo irrelevante a la hora de estudiar los tiempos puesto que se pueden modelar con una función matemática.
	(**) Esta conclusión se ha obtenido tras la repetición del experimento un cierto número de veces y con una lista desordenada generada de manera aleatoria en cada uno de los experimentos.
	(***) Para tiempo muy pequeños las mediciones no son del todo correctas por la forma de medir el tiempo.


4. CONCLUSIONES

	La primera conclusión que arroja este estudio es que para listas de tamaño mayores que 512.000 elementos (al menos) no es posible operar con funciones "Non-tail recursive" para los algoritmos de inseción y quicksort, mientras que el algoritmo de fusión tiene una restricción de tamaño de lista aún menor (al menos 256.000 elementos).
	Otra conclusión es que para listas ordenadas los algoritmos de inserción y fusión son mucho más rápidos que para listas no ordenadas. Sin embargo, para el caso del algoritmo de ordenación rápida esta regla no se cumple, y la ordenación de listas desordenadas es más rápida que la de listas ordenadas.

	*****NO HACE FALTA HACERLAS RECURSIVAS TERMINALES???*****



	